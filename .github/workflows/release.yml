name: Docker Build and Push to GHCR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create dummy version.txt for test build
        run: echo "test-version" > version.txt
      - name: Build test container
        run: docker compose -f docker-compose.prod.yml build hello-dalle-discordbot-test
      - name: Run tests in Docker
        env:
          DISCORD_BOT_TOKEN: "test-token"
          OPENAI_API_KEY: "test-key"
          BOTSPAM_CHANNEL_ID: "123456789"
          WELCOME_CHANNEL_ID: "123456789"
          PROFILE_CHANNEL_ID: "123456789"
          WELCOME_PROMPT: "test prompt"
        run: docker compose -f docker-compose.prod.yml run --rm hello-dalle-discordbot-test

  build-and-release:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write # to create release tags
      packages: write # to push docker image
      issues: write # to comment on issues
      pull-requests: write # to comment on pull requests
      deployments: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release to analyze history

      - name: Generate version.txt and release notes
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Summarize release notes and update release
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RELEASE_NOTES: ${{ steps.semantic.outputs.new_release_notes }}
        run: |
          pip install openai
          SUMMARY=$(python .github/scripts/summarize_release_notes.py)
          gh release edit ${{ steps.semantic.outputs.new_release_git_tag }} --notes "$SUMMARY" --repo ${{ github.repository }}

      - name: Create GitHub deployment
        if: steps.semantic.outputs.new_release_published == 'true'
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: '${{ github.token }}'
          environment-url: https://discord.com/channels/816371255539138620/1164501234271653918
          environment: production

      - name: Generate version files
        run: |
          echo "${{ steps.semantic.outputs.new_release_version }}" > version.txt
          echo "VERSION=${{ steps.semantic.outputs.new_release_version }}" > .env.version
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env.version
          echo "GIT_COMMIT=${{ github.sha }}" >> .env.version

      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3



      - name: Docker Login to Docker Hub
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image to Docker Hub
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            heavygee/hello-dalle-discordbot:latest
            heavygee/hello-dalle-discordbot:${{ steps.semantic.outputs.new_release_version }}
          build-args: |
            VERSION=${{ steps.semantic.outputs.new_release_version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment status (in progress)
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GH_TOKEN }}"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "in_progress"
          environment-url: "https://discord.com/channels/816371255539138620/1164501234271653918"

      - name: Update deployment status (success)
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GH_TOKEN }}"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "success"
          environment-url: "https://discord.com/channels/816371255539138620/1164501234271653918"

      - name: Update deployment status (failure)
        if: failure() && steps.semantic.outputs.new_release_published == 'true'
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GH_TOKEN }}"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "failure"
          environment-url: "https://discord.com/channels/816371255539138620/1164501234271653918"

      - name: Announce release to Discord
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get release information
          RELEASE_TAG="${{ steps.semantic.outputs.new_release_git_tag }}"
          RELEASE_VERSION="${{ steps.semantic.outputs.new_release_version }}"
          RELEASE_NOTES="${{ steps.semantic.outputs.new_release_notes }}"

          # Create Discord announcement
          DISCORD_MESSAGE="ðŸš€ **New Release: $RELEASE_VERSION**

          ðŸ“¦ **Docker Image**: \`heavygee/hello-dalle-discordbot:$RELEASE_VERSION\`
          ðŸ”— **Release Page**: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG

          ðŸ“‹ **What's New:**
          $RELEASE_NOTES

          #deployment #release"

          # Send to Discord webhook if webhook URL is configured
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": \"$DISCORD_MESSAGE\"}" \
              "$DISCORD_WEBHOOK_URL"
          else
            echo "Discord webhook URL not configured. Skipping Discord announcement."
          fi 